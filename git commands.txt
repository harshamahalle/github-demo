1 PWD- To know the current working directory of the user
2 mkdir - to create the new directory
3 cd - to change the directory
4 git version- to know the current git version on your system
5 git config --global user.name "your user name" - to set your user name for git
6 git config --global user.email "your email address" - to set your email address for git
7 git config --global --list- gives the name and email address set by above two commands
8 git clone - to clone your repository on local machine
9 ls - list down all the content in your repository
10 git status - to know the status of repository
11 echo "some content" >> File Name - this command will create new file and add the data in double quotes to that file
12 cat file_name - to know the content in the file
13 git add file_name - to add the file in staging area(by this command file will be tracked and git will show it as changes to be committed)
14 git commit -m "message" - to move tje file from staging area to local repository(now the changes will be tracked)
15 git push origin master - to push the changes in local repository to the remote repository(here origin refers to thegithub copy of our repository and master refers to the github branch where we are pushing the changes)
16 git iniy repo_name - to create new repository
17 - git init -b defaul_branch_name repository_name - here -b allow us to specify the default branch name for the repository
18 git config --global init.defaultBranch branch_name - This will update our settings to use branch name specified as default branch unless we specify other branch name explicitly
19 nano Readme - to edit the read me file
20 git config --global -e - passing the e parameter will allow us to edit the configuration 
ls -al = tells yhe list command to list all files and folders, including dot files and folders, and "-l" tells it to list it in the listing format
21 cd .. - to go into previous folder
22 rm -rf file_name - to delete folder
23 unzip folder_path - unzip the folder in current working directory
24 mv old_folder new_folder - to move the files in old_folder to new_folder
25 rm -rf .git - we are deleting .git file..that means git is removing all trace to manage that directory.
we can copy someones repo into our github account by clicking fork option.
26. git commit-am "message" - this command will do the work of both git add . and git commit.
27 git ls-file - It gives all the file name which git is tracking currently(tracked file means file which is added in staging area)
28 notepad .txt_file_name - if we want to open the .txt file in notepad from the git bash.
29 mkdir -p level1/level2/level3 -to create directory with folder  structure as level1/level2/level3
30 git reset HEAD file_name - to unstage the file .(that means changes in the file remain the same. but that will be present in working directory only)
31 git checkout -- file_name - this command will reset the file present in working directory to it's last commit.
32 git config --global alias.hist "full_command" -If you want to create shortcut for any command then we can use this command. after alias we use the shortcut keyword . --global is for appliying it for all the repositories.(We can edit an alias by openning gitconfig file in notepad and then save it)
33 git commit -am - That will add any modified files to the index first, and then commit it, and then the "-m" will allow us to
specify our commit message inline.
git commit --amend - To modify or add the commit in the most recent commit.

Difference
34 git diff HEAD- to know the difference in staging area and working directory.
35 git diff --Staged HEAD - difference between what's been staged and the last commit on the current branch
36 git diff File_name - to know the difference in particular file for working directory  and stagging area.
37 git diff commit_id HEAD - to know the difference in a head(local repository) for commit id commit and latest commit.
38 git diff HEAD HEAD^ - to know the difference in a head and one commit before the head.
39 git diff origin origin/master - to know the difference between local repository and remote repository (origin refers to HEAD(local repo) and origin/master refers to remote repo)

Branching
40 git branch -a - To list all the branches in repo.
41 git branch branch_name - to create new branch.
42 git checkout branch_name - to switch to a new branch.
43 git branch -m old_branch new_branch - to rename the branch
44 git branch -d branch_name - to delete branch
45 git checkout -b branch_name - -b will create a new branch before checkout.

Merging 

46 git merge branch_name - to merge the branch in the command to the branch we are currently in.
47 git merge branch_name --no-ff - To disable the fast forward merge.(It will take the commit message present in text file)
48 git merge --abort - to abort the merge.


Rebasing 
49 git rebase branch_name - to merge the changes in the master branch to the branch we are currently in.(vice versa of merge)
50 git rebase --abort - to abort the rebase.
51 git pull -- rebase origin master - to rebase the changes on github to our local repo master branch.
52 git fetch - to pull the changes on git hub on local repo unlike of pull command to pull it in working directory.

Stashing 
53  git stash - to save the changes in working directory and move to last commit. so that we can halt the current changes and work on some other changes.
54 git stash apply - to recall the changes which we stashed.
55 git stash list - The Git stash list command will pull up a list of your repository's stashes. Git will display all of your stashes and a corresponding stash index.( Now, if you wish to view the contents of a specific stash, you can run the Git stash show command followed by stash@ and the desired index.)
56 git stash drop - to dropp the stash.
57 git ls-files - list all the files which git is tracking.
Note : git only stash the files which are already tracked.
58 git stash -u - to stash the untracked file.
59 git stash pop - to recall and drop the stash by same command.
60 git stash save "message" - to add message with particular stash.(last stash will be save at index 0)
61 git stash show stash@{stash_no} - It will display the stash at specified stash number.
62 git stash apply stash@{stash_no} - It will apply the changes in stash specified in command.
63 git stash drop stash@{stash_no} - It will drop the changes in specified stash.
64 git stash branch branch_name - It will first create a new branch . checkout to new branch , add stashes from previous branch to new branch and in the end drop that stashes.(If we do git status after this command it will give the same status as we were getting before stash command in previous branch)

Tagging
ags are ref's that point to specific points in Git history. Git supports two different types of tags, annotated and lightweight tags. The previous example created a lightweight tag. Lightweight tags and Annotated tags differ in the amount of accompanying meta data they store. A best practice is to consider Annotated tags as public, and Lightweight tags as private.

65 git tag tag_name - It will create a new tag
66 git tag --list - It will give the list of tags(make sure to use -- else it will create a tag of name list)
67 git tag --delete tag_name - To delete a tag.
68 git tag -a tag_name - It will crate a annotated tag(-a will specify that it is a annotated tag)
69 git tag show tag_name - to show the particular tag details.
70 git tag tag_name -m "message" - to create a tag with a message.
71 git diff tag_name tag_name - to know the differences between two different tag.
72 git tag -a tag_name commit_id - It will create anotated tag for specifies commit id.
73 git tag -a tag_name -f correct_commit_id - If we want to change the tag to the another commit.
74 git push origin tag_name - to push the specified tag on github.
75 git push origin master --tags - to push all the tags on remote repository.
76 git push origin: tag_name - to delete the specified tag from remote repository and not on local repository.

Extra Commands 

77 git reset HEAD^1/ git reset HEAD^ - to move the head to the one previous commit.
78 git reset commit_id - It will reset our HEAD to that particular commit.
79 git reflog - It will give the history of what we have did including reset, commits. 
80 git reset HEAD{HEAD_no} - to reset the HEAD
81 










